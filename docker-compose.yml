services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - default_network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - default_network

  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - default_network

  create-buckets:
    image: minio/mc
    container_name: create-buckets
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY:-minioadmin} ${MINIO_SECRET_KEY:-minioadmin};
      /usr/bin/mc mb myminio/bronze --ignore-existing;
      /usr/bin/mc mb myminio/silver --ignore-existing;
      /usr/bin/mc mb myminio/gold --ignore-existing;
      /usr/bin/mc mb myminio/models --ignore-existing;
      exit 0;
      "
    networks:
      - default_network

  spark-master:
    build: ./src/spark_jobs
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./src:/opt/spark_apps/src
      - ./data:/opt/spark_apps/data
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - MINIO_ENDPOINT_URL_DOCKER=${MINIO_ENDPOINT_URL_DOCKER}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    networks:
      - default_network

  spark-worker:
    build: ./src/spark_jobs
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    volumes:
      - ./src:/opt/spark_apps/src
      - ./data:/opt/spark_apps/data
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - MINIO_ENDPOINT_URL_DOCKER=${MINIO_ENDPOINT_URL_DOCKER}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    networks:
      - default_network

  postgres-metastore:
    image: postgres:13
    container_name: postgres-metastore
    environment:
      - POSTGRES_DB=metastore
      - POSTGRES_USER=hive
      - POSTGRES_PASSWORD=hive
    volumes:
      - postgres_metastore_data:/var/lib/postgresql/data
    networks:
      - default_network

  hive-metastore:
    image: apache/hive:3.1.3
    container_name: hive-metastore
    environment:
      - SERVICE_NAME=metastore
      - DB_DRIVER=postgres
      - SERVICE_OPTS=-Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://postgres-metastore:5432/metastore -Djavax.jdo.option.ConnectionUserName=hive -Djavax.jdo.option.ConnectionPassword=hive
    ports:
      - "9083:9083"
    depends_on:
      - postgres-metastore
    command: ["/opt/hive/bin/hive", "--service", "metastore"]
    networks:
      - default_network

  trino:
    image: trinodb/trino:417
    container_name: trino
    ports:
      - "8082:8080"
    volumes:
      - ./trino/etc:/etc/trino
    depends_on:
      - minio
      - hive-metastore
    networks:
      - default_network

  flask-api:
    build: ./src/api
    container_name: flask-api
    ports:
      - "5001:5001"
    volumes:
      - ./src/api:/app
    environment:
      - MINIO_ENDPOINT_URL_DOCKER=${MINIO_ENDPOINT_URL_DOCKER}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    depends_on:
      - minio
      - spark-master
    networks:
      - default_network

  streamlit-dashboard:
    build: ./src/dashboard 
    container_name: streamlit-dashboard
    ports:
      - "8501:8501"
    volumes:
      - ./src/dashboard:/app 
    environment:
      - TRINO_HOST=trino
      - TRINO_PORT=8080
      - TRINO_USER=user
      - FLASK_API_URL=http://flask-api:5001
    depends_on:
      - trino
      - flask-api
    networks:
      - default_network

volumes:
  minio_data:
  postgres_metastore_data:

networks:
  default_network:
    driver: bridge