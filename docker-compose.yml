services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - default_network

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - default_network

  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - default_network

  create-buckets:
    image: minio/mc
    container_name: create-buckets
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      /usr/bin/mc mb myminio/bronze --ignore-existing;
      /usr/bin/mc mb myminio/silver --ignore-existing;
      /usr/bin/mc mb myminio/gold --ignore-existing;
      /usr/bin/mc mb myminio/models --ignore-existing;
      /usr/bin/mc mb myminio/flags --ignore-existing;
      exit 0;
      "
    networks:
      - default_network

  spark-base:
    build:
      context: .
      dockerfile: Dockerfile.spark-base
    image: fp-bigdata-spark-base:latest
    command: ["echo", "Spark base image built successfully."]

  spark-master:
    build: ./src/spark_jobs
    container_name: spark-master
    depends_on:
      spark-base:
        condition: service_started
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./src:/opt/spark_apps/src
      - ./data:/opt/spark_apps/data
    env_file:
      - .env
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      - default_network

  spark-worker:
    build: ./src/spark_jobs
    container_name: spark-worker-1
    depends_on:
      - spark-master
      - spark-base
    ports:
      - "8081:8081"
    volumes:
      - ./src:/opt/spark_apps/src
      - ./data:/opt/spark_apps/data
    env_file:
      - .env
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      - default_network

  flask-api:
    build: ./src/api
    container_name: flask-api
    depends_on:
      - minio
      - spark-master
      - spark-base
    ports:
      - "5001:5001"
    volumes:
      - ./src/api:/app
    env_file:
      - .env
    networks:
      - default_network

  streamlit:
    build: ./src/dashboard
    container_name: streamlit
    ports:
      - "8501:8501"
    env_file:
      - .env
    depends_on:
      flask-api:
        condition: service_started
    networks:
      - default_network

volumes:
  minio_data:

networks:
  default_network:
    driver: bridge